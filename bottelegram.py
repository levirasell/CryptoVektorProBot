import os
import io
import logging
import threading
import time
from datetime import datetime
from typing import Dict, Any, Optional, List

import requests
import matplotlib.pyplot as plt
import telebot
from telebot import types

# ------------------------------------------------------------------
# CONFIG
# ------------------------------------------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(BOT_TOKEN)

COINGECKO_API = "https://api.coingecko.com/api/v3"
FEAR_GREED_API = "https://api.alternative.me/fng/"
DEFILLAMA_CHAINS = "https://api.llama.fi/chains"
CRYPTO_CHANNEL_URL = "https://t.me/cryptovektorpro"

# –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ALERT_COINS: List[Dict[str, str]] = [
    {"id": "bitcoin", "label": "BTC"},
    {"id": "ethereum", "label": "ETH"},
    {"id": "tether", "label": "USDT"},
    {"id": "binancecoin", "label": "BNB"},
    {"id": "solana", "label": "SOL"},
    {"id": "ripple", "label": "XRP"},
    {"id": "usd-coin", "label": "USDC"},
    {"id": "dogecoin", "label": "DOGE"},
    {"id": "cardano", "label": "ADA"},
    {"id": "tron", "label": "TRX"},
    {"id": "avalanche-2", "label": "AVAX"},
    {"id": "polkadot", "label": "DOT"},
    {"id": "shiba-inu", "label": "SHIB"},
    {"id": "chainlink", "label": "LINK"},
    {"id": "litecoin", "label": "LTC"},
]

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ALERT_INTERVALS = [
    ("15 –º–∏–Ω", 15 * 60),
    ("30 –º–∏–Ω", 30 * 60),
    ("1 —á", 60 * 60),
    ("2 —á", 2 * 60 * 60),
    ("4 —á", 4 * 60 * 60),
    ("12 —á", 12 * 60 * 60),
    ("24 —á", 24 * 60 * 60),
]

# ------------------------------------------------------------------
# LOGGING
# ------------------------------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger("CryptoVektorProBot")

# ------------------------------------------------------------------
# CACHE
# ------------------------------------------------------------------
_API_CACHE: Dict[str, Dict[str, Any]] = {}
DEFAULT_TTL = 120
LONG_TTL = 3600

def cache_get(url: str, ttl: int = DEFAULT_TTL):
    rec = _API_CACHE.get(url)
    if not rec:
        return None
    if (time.time() - rec["ts"]) > ttl:
        return None
    return rec["data"]

def cache_set(url: str, data: Any):
    _API_CACHE[url] = {"ts": time.time(), "data": data}

def fetch_json(url: str, ttl: int = DEFAULT_TTL) -> Optional[Any]:
    cached = cache_get(url, ttl=ttl)
    if cached is not None:
        return cached
    try:
        r = requests.get(url, timeout=15)
        if r.status_code == 200:
            data = r.json()
            cache_set(url, data)
            return data
        logger.warning("API non-200 %s -> %s", url, r.status_code)
        return None
    except Exception as e:
        logger.error("Fetch error %s: %s", url, e)
        return None

# ------------------------------------------------------------------
# FORMATTING HELPERS
# ------------------------------------------------------------------
def fmt_money(v: Any, decimals: int = 2) -> str:
    try:
        f = float(v)
    except Exception:
        return "N/A"
    if f >= 1:
        return f"${f:,.{decimals}f}"
    return f"${f:.8f}".rstrip("0").rstrip(".")

def fmt_int(v: Any) -> str:
    try:
        return f"{int(v):,}"
    except Exception:
        return "N/A"

def fmt_pct(v: Any) -> str:
    try:
        return f"{float(v):+.2f}%"
    except Exception:
        return "N/A"

def now_str() -> str:
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# ------------------------------------------------------------------
# KEYBOARDS
# ------------------------------------------------------------------
def main_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", callback_data="global"),
        types.InlineKeyboardButton("üèÜ –¢–æ–ø-10 –º–æ–Ω–µ—Ç", callback_data="top10"),
        types.InlineKeyboardButton("üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã", callback_data="trending"),
        types.InlineKeyboardButton("üíπ –¢–æ–ø –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É", callback_data="pairs"),
        types.InlineKeyboardButton("üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏", callback_data="fear"),
        types.InlineKeyboardButton("üíé DeFi –º–µ—Ç—Ä–∏–∫–∏", callback_data="defi"),
        types.InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="alerts_menu"),
    ]
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª CryptoVektorPro", url=CRYPTO_CHANNEL_URL))
    return keyboard

def back_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

def alerts_coin_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    for coin in ALERT_COINS:
        buttons.append(types.InlineKeyboardButton(coin["label"], callback_data=f"alert_coin_{coin['id']}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 3):
        keyboard.add(*buttons[i:i+3])
    
    keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="alerts_clear"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

def alerts_interval_keyboard(coin_id: str):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    for label, seconds in ALERT_INTERVALS:
        buttons.append(types.InlineKeyboardButton(label, callback_data=f"alert_set_{coin_id}_{seconds}"))
    
    for i in range(0, len(buttons), 3):
        keyboard.add(*buttons[i:i+3])
    
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="alerts_menu"))
    return keyboard

def coin_card_keyboard(coin_id: str):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ 24—á", callback_data=f"chart_{coin_id}"))
    keyboard.add(types.InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"alert_coin_{coin_id}"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard

# ------------------------------------------------------------------
# COIN DATA
# ------------------------------------------------------------------
_COINS_LIST_CACHE: Optional[List[Dict[str, str]]] = None

def load_coins_list() -> Optional[List[Dict[str, str]]]:
    global _COINS_LIST_CACHE
    if _COINS_LIST_CACHE is not None:
        return _COINS_LIST_CACHE
    data = fetch_json(f"{COINGECKO_API}/coins/list", ttl=LONG_TTL)
    if isinstance(data, list):
        _COINS_LIST_CACHE = data
        return data
    return None

def find_coin_id(user_input: str) -> Optional[str]:
    user_input = user_input.strip().lower()
    coins = load_coins_list()
    if not coins:
        return None
    
    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for c in coins:
        if user_input == c["id"].lower() or user_input == c["symbol"].lower() or user_input == c["name"].lower():
            return c["id"]
    
    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª—É
    for c in coins:
        if user_input in c["symbol"].lower():
            return c["id"]
    
    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    for c in coins:
        if user_input in c["name"].lower():
            return c["id"]
    return None

# ------------------------------------------------------------------
# DATA FUNCTIONS
# ------------------------------------------------------------------
def get_global_metrics_text() -> str:
    data = fetch_json(f"{COINGECKO_API}/global")
    if not data or "data" not in data:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
    d = data["data"]
    return (
        "<b>üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {fmt_int(d.get('active_cryptocurrencies'))}\n"
        f"–ë–∏—Ä–∂–∏: {fmt_int(d.get('markets'))}\n"
        f"–û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {fmt_money(d.get('total_market_cap', {}).get('usd'), 0)}\n"
        f"–û–±—ä–µ–º 24—á: {fmt_money(d.get('total_volume', {}).get('usd'), 0)}\n"
        f"BTC Dominance: {d.get('market_cap_percentage', {}).get('btc', 0):.2f}%\n"
        f"ETH Dominance: {d.get('market_cap_percentage', {}).get('eth', 0):.2f}%\n"
        f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {now_str()}</i>"
    )

def get_top10_text() -> str:
    data = fetch_json(f"{COINGECKO_API}/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1")
    if not isinstance(data, list):
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
    lines = ["<b>üèÜ –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n"]
    for coin in data:
        lines.append(
            f"{coin['market_cap_rank']}. <b>{coin['name']}</b> ({coin['symbol'].upper()})\n"
            f"   –¶–µ–Ω–∞: {fmt_money(coin['current_price'])}\n"
            f"   MC: {fmt_money(coin['market_cap'], 0)}\n"
            f"   24—á: {fmt_pct(coin.get('price_change_percentage_24h'))}\n"
        )
    lines.append(f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {now_str()}</i>")
    return "\n".join(lines)

def get_trending_text() -> str:
    data = fetch_json(f"{COINGECKO_API}/search/trending")
    if not data or "coins" not in data:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
    lines = ["<b>üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã</b>\n"]
    for i, item in enumerate(data["coins"], start=1):
        c = item["item"]
        lines.append(
            f"{i}. <b>{c['name']}</b> ({c['symbol']}) ‚Äî –†–∞–Ω–≥: {c.get('market_cap_rank', '?')}"
        )
    lines.append(f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {now_str()}</i>")
    return "\n".join(lines)

def get_pairs_text() -> str:
    coins = fetch_json(
        f"{COINGECKO_API}/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1"
    )
    if not isinstance(coins, list):
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
    
    pairs = []
    for coin in coins:
        coin_id = coin["id"]
        tickers_data = fetch_json(f"{COINGECKO_API}/coins/{coin_id}/tickers")
        if not tickers_data:
            continue
        for t in tickers_data.get("tickers", []):
            vol = t.get("volume")
            price = t.get("last")
            base = t.get("base")
            target = t.get("target")
            exch = t.get("market", {}).get("name")
            if vol and price and base and target and exch:
                pairs.append({
                    "pair": f"{base}/{target}",
                    "volume": vol,
                    "price": price,
                    "exchange": exch,
                })
    
    if not pairs:
        return "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    pairs.sort(key=lambda x: x["volume"], reverse=True)
    top = pairs[:10]
    lines = ["<b>üíπ –¢–æ–ø 10 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –æ–±—ä—ë–º—É</b>\n"]
    for i, p in enumerate(top, start=1):
        lines.append(
            f"{i}. <b>{p['pair']}</b> –Ω–∞ <i>{p['exchange']}</i>\n"
            f"   –¶–µ–Ω–∞: {fmt_money(p['price'], 6)}\n"
            f"   –û–±—ä—ë–º: {fmt_money(p['volume'], 0)}\n"
        )
    lines.append(f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {now_str()}</i>")
    return "\n".join(lines)

def get_fear_text() -> str:
    data = fetch_json(FEAR_GREED_API)
    if not data or "data" not in data:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
    v = data["data"][0]
    ts = datetime.utcfromtimestamp(int(v["timestamp"])).strftime("%Y-%m-%d %H:%M UTC")
    return (
        "<b>üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏</b>\n\n"
        f"–ó–Ω–∞—á–µ–Ω–∏–µ: {v['value']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {v['value_classification']}\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {ts}"
    )

def get_defi_text() -> str:
    data = fetch_json(DEFILLAMA_CHAINS)
    if not isinstance(data, list):
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
    top = sorted(data, key=lambda x: x.get("tvl", 0), reverse=True)[:5]
    lines = ["<b>üíé DeFi –ú–µ—Ç—Ä–∏–∫–∏ (Top-5 Chain –ø–æ TVL)</b>\n"]
    for i, ch in enumerate(top, start=1):
        lines.append(
            f"{i}. {ch['name']}\n"
            f"   TVL: {fmt_money(ch.get('tvl'), 0)}\n"
            f"   –ò–∑–º. 1–¥: {fmt_pct(ch.get('change_1d'))}\n"
        )
    lines.append(f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {now_str()}</i>")
    return "\n".join(lines)

def get_coin_card_text(coin_id: str) -> Optional[str]:
    data = fetch_json(f"{COINGECKO_API}/coins/{coin_id}?localization=false&tickers=false&market_data=true")
    if not data:
        return None
    md = data.get("market_data", {})
    return (
        f"<b>{data['name']} ({data['symbol'].upper()})</b>\n\n"
        f"–¶–µ–Ω–∞: {fmt_money(md.get('current_price', {}).get('usd'))}\n"
        f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {fmt_money(md.get('market_cap', {}).get('usd'), 0)}\n"
        f"–û–±—ä—ë–º 24—á: {fmt_money(md.get('total_volume', {}).get('usd'), 0)}\n"
        f"–ò–∑–º. 24—á: {fmt_pct(md.get('price_change_percentage_24h'))}\n"
    )

def build_coin_chart_image_bytes(coin_id: str) -> Optional[io.BytesIO]:
    data = fetch_json(f"{COINGECKO_API}/coins/{coin_id}/market_chart?vs_currency=usd&days=1")
    if not data or "prices" not in data:
        return None
    prices = data["prices"]
    if not prices:
        return None
    
    xs = [datetime.fromtimestamp(p[0] / 1000) for p in prices]
    ys = [p[1] for p in prices]
    
    plt.figure(figsize=(8, 4))
    plt.plot(xs, ys)
    plt.title(f"{coin_id.upper()} ‚Äî 24—á")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–¶–µ–Ω–∞ $")
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.figtext(0.99, 0.01, now_str(), ha="right", fontsize=8, color="gray")
    
    buf = io.BytesIO()
    plt.savefig(buf, format="png", dpi=150)
    plt.close()
    buf.seek(0)
    return buf

def get_simple_price(coin_id: str) -> Optional[float]:
    data = fetch_json(f"{COINGECKO_API}/simple/price?ids={coin_id}&vs_currencies=usd", ttl=30)
    if not data or coin_id not in data:
        return None
    return float(data[coin_id]["usd"])

# ------------------------------------------------------------------
# ALERTS SYSTEM
# ------------------------------------------------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: alerts_store[chat_id][coin_id] = {"thread": thread, "last_price": price, "interval": seconds}
alerts_store: Dict[int, Dict[str, Dict]] = {}

def alert_worker(chat_id: int, coin_id: str, interval_s: int):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    last_price = get_simple_price(coin_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if last_price:
        bot.send_message(chat_id, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è {coin_id.upper()}: {fmt_money(last_price, 6)}")
        alerts_store[chat_id][coin_id]["last_price"] = last_price
    
    while True:
        try:
            time.sleep(interval_s)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∞–ª–µ—Ä—Ç –æ—Ç–∫–ª—é—á–µ–Ω
            if chat_id not in alerts_store or coin_id not in alerts_store[chat_id]:
                break
            
            current_price = get_simple_price(coin_id)
            if current_price is None:
                bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {coin_id}")
                continue
            
            last_price = alerts_store[chat_id][coin_id].get("last_price")
            change_pct = None
            
            if last_price and last_price > 0:
                change_pct = ((current_price - last_price) / last_price) * 100.0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
            alerts_store[chat_id][coin_id]["last_price"] = current_price
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if change_pct is None:
                msg = f"üîî {coin_id.upper()}: {fmt_money(current_price, 6)}"
            else:
                emoji = "üìà" if change_pct > 0 else "üìâ" if change_pct < 0 else "‚û°Ô∏è"
                msg = (
                    f"üîî {coin_id.upper()}\n"
                    f"–¶–µ–Ω–∞: {fmt_money(current_price, 6)}\n"
                    f"{emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_pct:+.2f}%"
                )
            
            bot.send_message(chat_id, msg)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ alert_worker –¥–ª—è {chat_id}/{coin_id}: {e}")
            break

def setup_alert(chat_id: int, coin_id: str, interval_s: int):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in alerts_store:
        alerts_store[chat_id] = {}
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–ª–µ—Ä—Ç –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã, –µ—Å–ª–∏ –±—ã–ª
    if coin_id in alerts_store[chat_id]:
        # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å–∞–º –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        pass
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    thread = threading.Thread(
        target=alert_worker,
        args=(chat_id, coin_id, interval_s),
        daemon=True
    )
    
    alerts_store[chat_id][coin_id] = {
        "thread": thread,
        "interval": interval_s,
        "last_price": None
    }
    
    thread.start()

def clear_all_alerts(chat_id: int):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id in alerts_store:
        alerts_store[chat_id].clear()

# ------------------------------------------------------------------
# COMMAND HANDLERS
# ------------------------------------------------------------------
@bot.message_handler(commands=['start'])
def start_command(message):
    text = (
        "<b>üöÄ CryptoVektorPro</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ.\n\n"
        f'<a href="{CRYPTO_CHANNEL_URL}">üì¢ –ù–∞—à –∫–∞–Ω–∞–ª</a>'
    )
    bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=main_menu_keyboard())

@bot.message_handler(commands=['coin'])
def coin_command(message):
    try:
        user_input = message.text.split(' ', 1)[1]
        coin_id = find_coin_id(user_input)
        if not coin_id:
            bot.send_message(message.chat.id, "‚ùå –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        card = get_coin_card_text(coin_id)
        if not card:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        bot.send_message(message.chat.id, card, parse_mode="HTML", reply_markup=coin_card_keyboard(coin_id))
    except IndexError:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /coin <–º–æ–Ω–µ—Ç–∞>\n–ü—Ä–∏–º–µ—Ä: /coin bitcoin")

@bot.message_handler(commands=['alert'])
def alert_command(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=alerts_coin_keyboard())

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "<b>üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/coin <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–µ—Ç–µ\n"
        "/alert - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
    )
    bot.send_message(message.chat.id, help_text, parse_mode="HTML")

# ------------------------------------------------------------------
# CALLBACK HANDLERS
# ------------------------------------------------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    bot.answer_callback_query(call.id)
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    data = call.data
    
    try:
        if data == "main_menu":
            text = (
                "<b>üöÄ CryptoVektorPro</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
            )
            bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", reply_markup=main_menu_keyboard())
        
        elif data == "global":
            text = get_global_metrics_text()
            bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", reply_markup=back_keyboard())
        
        elif data == "top10":
            text = get_top10_text()
            bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", reply_markup=back_keyboard())
        
        elif data == "trending":
            text = get_trending_text()
            bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", reply_markup=back_keyboard())
        
        elif data == "pairs":
            text = get_pairs_text()
            bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", reply_markup=back_keyboard())
        
        elif data == "fear":
            text = get_fear_text()
            bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", reply_markup=back_keyboard())
        
        elif data == "defi":
            text = get_defi_text()
            bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", reply_markup=back_keyboard())
        
        elif data == "alerts_menu":
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", chat_id, message_id, reply_markup=alerts_coin_keyboard())
        
        elif data == "alerts_clear":
            clear_all_alerts(chat_id)
            bot.edit_message_text("‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.", chat_id, message_id, reply_markup=alerts_coin_keyboard())
        
        elif data.startswith("alert_coin_"):
            coin_id = data[len("alert_coin_"):]
            text = f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞ <b>{coin_id.upper()}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
            bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", reply_markup=alerts_interval_keyboard(coin_id))
        
        elif data.startswith("alert_set_"):
            parts = data.split("_")
            if len(parts) >= 4:
                coin_id = parts[2]
                try:
                    seconds = int(parts[3])
                except ValueError:
                    seconds = 3600
                
                setup_alert(chat_id, coin_id, seconds)
                interval_text = f"{seconds // 60} –º–∏–Ω" if seconds < 3600 else f"{seconds // 3600} —á"
                text = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è <b>{coin_id.upper()}</b> –∫–∞–∂–¥—ã–µ {interval_text}."
                bot.edit_message_text(text, chat_id, message_id, parse_mode="HTML", reply_markup=alerts_coin_keyboard())
        
        elif data.startswith("chart_"):
            coin_id = data[len("chart_"):]
            buf = build_coin_chart_image_bytes(coin_id)
            if buf:
                caption = f"üìà –ì—Ä–∞—Ñ–∏–∫ {coin_id.upper()} –∑–∞ 24—á\n{now_str()}"
                bot.send_photo(chat_id, buf, caption=caption)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –º–æ–Ω–µ—Ç—ã
                card = get_coin_card_text(coin_id)
                if card:
                    bot.send_message(chat_id, card, parse_mode="HTML", reply_markup=coin_card_keyboard(coin_id))
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# ------------------------------------------------------------------
# TEXT HANDLER
# ------------------------------------------------------------------
@bot.message_handler(content_types=['text'])
def handle_text(message):
    bot.send_message(
        message.chat.id,
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!\n\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "/coin <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–µ—Ç–µ"
    )

# ------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------
if __name__ == "__main__":
    logger.info("üöÄ CryptoVektorPro Bot –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
